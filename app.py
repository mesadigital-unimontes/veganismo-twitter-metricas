from shiny import App, ui, render
import pandas as pd
import json

# --- Dados Anuais (incorporados no código) ---
data_anual = {
    'created_at': [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022],
    'total': [124970, 129903, 143084, 185544, 247434, 305525, 454920, 969518, 858414, 630798, 542551],
    'posted': [87385, 93884, 97008, 127552, 156171, 154814, 190925, 310280, 316411, 243588, 191233],
    'retweeted': [18441, 18658, 27291, 33036, 55391, 101586, 182003, 456387, 286425, 178904, 183790],
    'replied': [19144, 17361, 18785, 24956, 35872, 49125, 81992, 202851, 255578, 208306, 167528]
}
df_anual = pd.DataFrame(data_anual)
df_anual['created_at'] = pd.to_datetime(df_anual['created_at'], format="%Y")

# --- Dados Mensais (incorporados no código) ---
data_mensal = {
    'created_at': pd.to_datetime([
        '2012-01-01', '2012-02-01', '2012-03-01', '2012-04-01', '2012-05-01', '2012-06-01', '2012-07-01', '2012-08-01', '2012-09-01', '2012-10-01', '2012-11-01', '2012-12-01',
        '2013-01-01', '2013-02-01', '2013-03-01', '2013-04-01', '2013-05-01', '2013-06-01', '2013-07-01', '2013-08-01', '2013-09-01', '2013-10-01', '2013-11-01', '2013-12-01',
        '2014-01-01', '2014-02-01', '2014-03-01', '2014-04-01', '2014-05-01', '2014-06-01', '2014-07-01', '2014-08-01', '2014-09-01', '2014-10-01', '2014-11-01', '2014-12-01',
        '2015-01-01', '2015-02-01', '2015-03-01', '2015-04-01', '2015-05-01', '2015-06-01', '2015-07-01', '2015-08-01', '2015-09-01', '2015-10-01', '2015-11-01', '2015-12-01',
        '2016-01-01', '2016-02-01', '2016-03-01', '2016-04-01', '2016-05-01', '2016-06-01', '2016-07-01', '2016-08-01', '2016-09-01', '2016-10-01', '2016-11-01', '2016-12-01',
        '2017-01-01', '2017-02-01', '2017-03-01', '2017-04-01', '2017-05-01', '2017-06-01', '2017-07-01', '2017-08-01', '2017-09-01', '2017-10-01', '2017-11-01', '2017-12-01',
        '2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01', '2018-05-01', '2018-06-01', '2018-07-01', '2018-08-01', '2018-09-01', '2018-10-01', '2018-11-01', '2018-12-01',
        '2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01', '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01',
        '2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01', '2020-11-01', '2020-12-01',
        '2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01', '2021-07-01', '2021-08-01', '2021-09-01', '2021-10-01', '2021-11-01', '2021-12-01',
        '2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01', '2022-06-01', '2022-07-01', '2022-08-01', '2022-09-01', '2022-10-01', '2022-11-01', '2022-12-01'
    ]),
    'total': [
        8261, 9109, 9582, 9193, 10116, 11387, 10246, 9384, 8843, 11822, 12693, 14334, 10600, 9606, 11267, 12782, 12845, 10762, 10183, 9285, 10450, 10688, 9753, 11682,
        11128, 9281, 11234, 10985, 12182, 11520, 11847, 10850, 11218, 11259, 10898, 10682, 11328, 12284, 15182, 14592, 15307, 14249, 16298, 17136, 18554, 15180, 16134, 18386,
        17572, 19183, 21865, 21645, 20641, 22692, 20887, 21690, 21695, 22359, 23977, 23228, 22114, 23683, 25299, 27763, 28148, 27352, 27793, 24653, 24141, 23512, 23548, 27721,
        29517, 30338, 38177, 42810, 41258, 39938, 42938, 36242, 41177, 44234, 45920, 42371, 72392, 60322, 70621, 63380, 78848, 112119, 96951, 78625, 61995, 69328, 61502, 63178,
        52337, 62237, 93388, 80498, 85698, 77850, 71556, 63836, 59455, 57865, 71833, 81863, 68592, 53835, 61719, 45453, 49200, 48696, 48656, 46266, 46282, 45831, 46183, 48285,
        50865, 46281, 58470, 48512, 46252, 49265, 48332, 45672, 43924, 42721, 46251, 45704
    ],
    'posted': [
        5783, 6376, 6707, 6435, 7081, 7971, 7172, 6569, 6190, 8275, 8885, 10034, 7420, 6724, 7887, 8947, 8992, 7533, 7128, 6499, 7315, 7482, 6827, 8177,
        7790, 6497, 7864, 7690, 8527, 8064, 8293, 7595, 7853, 7881, 7629, 7477, 7930, 8599, 10627, 10214, 10715, 9974, 11409, 12000, 12988, 10626, 11294, 12870,
        12300, 13428, 15306, 15152, 14449, 15884, 14621, 15183, 15187, 15651, 16784, 16260, 15480, 16578, 17709, 19434, 19704, 19146, 19455, 17257, 16899, 16458, 16484, 19405,
        20662, 21237, 26724, 29967, 28881, 27957, 30057, 25369, 28824, 30964, 32144, 29660, 50674, 42225, 49435, 44366, 55194, 78483, 67866, 55038, 43397, 48530, 43051, 44225,
        36636, 43566, 65372, 56349, 60000, 54495, 50089, 44685, 41619, 40506, 50283, 57304, 48014, 37685, 43203, 31817, 34440, 34087, 34059, 32386, 32397, 32082, 32328, 33799,
        35606, 32397, 40929, 33958, 32376, 34486, 33832, 31970, 30747, 29905, 32376, 31993
    ],
    'retweeted': [
        1239, 1366, 1437, 1379, 1517, 1708, 1537, 1408, 1326, 1773, 1904, 2150, 1590, 1441, 1690, 1917, 1927, 1614, 1527, 1393, 1568, 1603, 1463, 1752,
        1669, 1392, 1685, 1648, 1827, 1728, 1777, 1628, 1683, 1689, 1635, 1602, 1699, 1843, 2277, 2189, 2296, 2137, 2445, 2570, 2783, 2277, 2420, 2758,
        2636, 2877, 3280, 3247, 3096, 3404, 3133, 3254, 3254, 3354, 3597, 3484, 3317, 3552, 3795, 4164, 4222, 4103, 4169, 3698, 3621, 3527, 3532, 4158,
        4428, 4551, 5727, 6422, 6189, 5991, 6441, 5436, 6177, 6635, 6888, 6356, 10859, 9048, 10593, 9507, 11827, 16818, 14538, 11794, 9300, 10399, 9225, 9477,
        7851, 9336, 14008, 12075, 12855, 11678, 10733, 9575, 8918, 8680, 10775, 12279, 10289, 8075, 9258, 6818, 7380, 7304, 7298, 6940, 6942, 6875, 6927, 7243,
        7630, 6942, 8771, 7277, 6938, 7390, 7250, 6851, 6589, 6408, 6938, 6856
    ],
    'replied': [
        1239, 1367, 1438, 1379, 1518, 1708, 1537, 1407, 1327, 1774, 1904, 2150, 1590, 1441, 1690, 1918, 1926, 1615, 1528, 1393, 1567, 1603, 1463, 1753,
        1669, 1392, 1685, 1647, 1828, 1728, 1777, 1627, 1682, 1689, 1634, 1603, 1699, 1842, 2278, 2189, 2296, 2138, 2444, 2566, 2783, 2277, 2420, 2758,
        2636, 2878, 3279, 3246, 3096, 3404, 3133, 3253, 3254, 3354, 3596, 3484, 3317, 3553, 3795, 4165, 4222, 4103, 4169, 3698, 3621, 3527, 3532, 4158,
        4427, 4550, 5726, 6421, 6188, 5990, 6440, 5437, 6176, 6635, 6888, 6355, 10859, 9049, 10593, 9507, 11827, 16818, 14547, 11793, 9298, 10399, 9226, 9476,
        7850, 9335, 14008, 12074, 12843, 11677, 10734, 9576, 8918, 8679, 10775, 12280, 10289, 8075, 9258, 6818, 7380, 7305, 7299, 6940, 6943, 6874, 6928, 7242,
        7629, 6942, 8770, 7277, 6938, 7389, 7250, 6851, 6588, 6408, 6937, 6855
    ]
}
df_mensal_original = pd.DataFrame(data_mensal)


# --- Preparação dos dados para o gráfico ---
# Dados anuais
df_anual_stacked = df_anual[['created_at', 'posted', 'retweeted', 'replied']].copy()
df_anual_stacked.rename(
    columns={'posted': 'Posted', 'retweeted': 'Retweeted', 'replied': 'Replied'},
    inplace=True
)

# Dados mensais
df_mensal_stacked = df_mensal_original[['created_at', 'posted', 'retweeted', 'replied']].copy()
df_mensal_stacked.rename(
    columns={'posted': 'Posted', 'retweeted': 'Retweeted', 'replied': 'Replied'},
    inplace=True
)

metrics = ['Posted', 'Retweeted', 'Replied']
colors = ['#2f2f2f', '#696969', '#b2b2b2']

# --- UI (Interface do Usuário) ---
app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_radio_buttons(
            "periodicidade",
            "Selecione a periodicidade:",
            {"Anual": "Anual", "Mensal": "Mensal"},
            selected="Anual"
        ),
        title="Controles",
        bg="#f8f8f8"
    ),
    ui.card(
        ui.output_ui("grafico_html"),
        ui.output_ui("grafico_script"),
        style="min-height: 500px;"
    ),
    ui.tags.head(
        ui.tags.script(src="https://code.highcharts.com/highcharts.js")
    ),
    title="Métricas em tweets"
)

# --- Server (Lógica da Aplicação) ---
def server(input, output, session):
    @render.ui
    def grafico_html():
        return ui.HTML('<div id="container" style="height: 400px; width: 100%;"></div>')

    @render.ui
    def grafico_script():
        periodicidade = input.periodicidade()

        if periodicidade == "Anual":
            df = df_anual_stacked
            x_vals = df["created_at"].dt.year.astype(str).tolist()
            subtitle_text = "2012 a 2022"
        else: # Mensal
            df = df_mensal_stacked
            x_vals = df["created_at"].dt.strftime("%Y-%m").tolist()
            subtitle_text = "Dados Mensais"

        series_data = []
        for i, metric in enumerate(metrics):
            series_data.append({
                "name": metric,
                "data": df[metric].tolist(),
                "color": colors[i]
            })

        cfg = {
            "chart": {"type": "area"},
            "title": {"text": None},
            "subtitle": {"text": subtitle_text, "align": "left"},
            "xAxis": {"categories": x_vals, "tickmarkPlacement": "on", "title": {"enabled": False}},
            "yAxis": {
                "title": {"text": None},
                "labels": {"format": "{value:,.0f}"}
            },
            "tooltip": {
                "shared": True,
                "pointFormat": '<span style="color:{series.color}">●</span> {series.name}: <b>{point.y:,.0f}</b><br/>'
            },
            "plotOptions": {
                "area": {
                    "stacking": 'normal',
                    "lineColor": '#666666',
                    "lineWidth": 1,
                    "marker": {
                        "lineWidth": 1,
                        "lineColor": '#666666',
                        "symbol": "circle"
                    }
                }
            },
            "legend": {
                "layout": 'vertical', "align": 'left', "verticalAlign": 'top',
                "x": 80, "y": 40, "floating": True, "borderWidth": 1,
                "backgroundColor": '#FFFFFF', "title": {"text": "Métricas"}
            },
            "series": series_data,
            "credits": {"text": "Fonte: API do X/Twitter", "href": ""}
        }

        cfg_json = json.dumps(cfg)

        return ui.tags.script(
            f"""
            (function render() {{
                var go = (typeof Highcharts !== 'undefined') && document.getElementById('container');
                if (!go) {{ setTimeout(render, 50); return; }}
                Highcharts.chart('container', {cfg_json});
            }})();
            """
        )

app = App(app_ui, server)